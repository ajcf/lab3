For our experiment we tried to run a variety of numbers of threads on a varity of server client combinations. 
First we ran both the client and the server on our computer. We then checked how long it took to run when using 1, 10, 100, and 1,000 threads. We then ran the client on our computer and the server on the Edlab, and checked how long it took to run when using 1, 10, 100, and 1,000 threads. Then we ran the the client on our computer and the server on EC2, and checked how long it took to run when using 1, 10, 100, and 1,000 threads. We would have rund 10,000 threads or 10 million threads, but any number of threads larger than 1000 caused so many exceptions to happen that the program would stop running. Even when running 1000 threads, there were an absurd number of exceptions thrown, however they didn't stop the programs from running. The outcome of the data is shown clearly in a graph that has also been submitted. As expected, running from computer to computer worked the fastest. Running from a computer to the edlab was by far the slowest, and EC2 was in the middle. Though, this diferentiation was only clear when there were 1000, threads. At lower levels, the numbers were all very close to each other. However EC2 has the worst performance for 1-100 threads. 
Please open data.xls in order to view our graph and see our data from this experiment